name: Build Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write  # Required for creating releases

jobs:
  build:
    timeout-minutes: 30  # Add timeout to prevent hanging builds
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-22.04
            artifact_name: MedicalAssistant-Linux
            build_script: ./scripts/build_linux.sh
            dist_path: dist/MedicalAssistant
          - os: windows-latest
            artifact_name: MedicalAssistant-Windows
            build_script: scripts/build_windows_ci.bat
            dist_path: dist/MedicalAssistant.exe
          - os: macos-latest
            artifact_name: MedicalAssistant-macOS
            build_script: ./scripts/build_macos.sh
            dist_path: dist/MedicalAssistant.app

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        export DEBIAN_FRONTEND=noninteractive
        export NEEDRESTART_MODE=a
        export NEEDRESTART_SUSPEND=1
        sudo -E apt-get update -qq -o=Dpkg::Use-Pty=0
        sudo -E apt-get install -y -qq -o=Dpkg::Use-Pty=0 -o=Dpkg::Options::="--force-confold" -o=Dpkg::Options::="--force-confdef" --no-install-recommends python3-tk portaudio19-dev
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install portaudio
        # python-tk is included with Python on macOS, no need to install separately

    - name: Make build script executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x ${{ matrix.build_script }}

    - name: Build application (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      env:
        PYTHON: python
        SKIP_FFMPEG_DOWNLOAD: "1"  # Skip FFmpeg download in CI to avoid timeouts
      run: ${{ matrix.build_script }}
    
    - name: Build application (Unix)
      if: runner.os != 'Windows'
      shell: bash
      env:
        SKIP_FFMPEG_DOWNLOAD: "1"  # Skip FFmpeg download in CI to avoid timeouts
      run: ${{ matrix.build_script }}

    - name: Compress macOS app
      if: runner.os == 'macOS'
      run: |
        if [ -d "dist/MedicalAssistant.app" ]; then
          cd dist
          zip -r ../MedicalAssistant-macOS.zip MedicalAssistant.app
        else
          echo "Error: dist/MedicalAssistant.app not found!"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of dist directory (if exists):"
          ls -la dist/ || echo "dist directory does not exist"
          exit 1
        fi

    - name: Upload artifact (Windows/Linux)
      if: runner.os != 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.dist_path }}

    - name: Upload artifact (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: MedicalAssistant-macOS.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/MedicalAssistant-Linux/MedicalAssistant
          artifacts/MedicalAssistant-Windows/MedicalAssistant.exe
          artifacts/MedicalAssistant-macOS/MedicalAssistant-macOS.zip
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}