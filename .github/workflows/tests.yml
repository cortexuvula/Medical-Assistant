name: Tests

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.10'

permissions:
  contents: read

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # System dependencies
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          portaudio19-dev \
          python3-tk \
          python3-dev \
          xvfb \
          x11-utils
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg portaudio
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg
    
    # Python dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    # Create necessary directories
    - name: Create test directories
      run: |
        python -c "import os; os.makedirs('logs', exist_ok=True)"
        python -c "import os; os.makedirs('AppData', exist_ok=True)"
    
    # Run linting (only on one combination to save time)
    - name: Run linting
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      run: |
        black --check . || true  # Don't fail on formatting
        flake8 . --max-line-length=120 --extend-ignore=E203,W503 || true
        # mypy . --ignore-missing-imports || true
    
    # Run tests (Linux with xvfb)
    - name: Run tests with coverage (Linux)
      if: runner.os == 'Linux'
      env:
        MEDICAL_ASSISTANT_ENV: testing
        DISPLAY: ':99'
      run: |
        xvfb-run -a pytest -v --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=0 --ignore=tests/unit/test_ui_basic.py --ignore=tests/unit/test_ui_medical_assistant.py --ignore=tests/unit/test_tkinter_ui_basic.py --ignore=tests/unit/test_tkinter_ui_medical_assistant.py --ignore=tests/unit/test_tkinter_workflow_tabs.py --ignore=tests/unit/test_tkinter_chat_and_editors.py
    
    # Run tests (Windows/macOS)
    - name: Run tests with coverage (Windows/macOS)
      if: runner.os != 'Linux'
      env:
        MEDICAL_ASSISTANT_ENV: testing
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=0 --ignore=tests/unit/test_ui_basic.py --ignore=tests/unit/test_ui_medical_assistant.py --ignore=tests/unit/test_tkinter_ui_basic.py --ignore=tests/unit/test_tkinter_ui_medical_assistant.py --ignore=tests/unit/test_tkinter_workflow_tabs.py --ignore=tests/unit/test_tkinter_chat_and_editors.py
    
    # Upload coverage
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false

  build-test:
    name: Test Build on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Install dependencies for build
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=6.3.0
    
    # Test PyInstaller build
    - name: Test PyInstaller build
      run: |
        pyinstaller --version
        # Simple test build (not full spec)
        pyinstaller --onefile --name MedicalAssistantTest main.py || true
    
    - name: Check build output
      run: |
        python -c "import os; print('dist contents:', os.listdir('dist') if os.path.exists('dist') else 'No dist folder')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Install system dependencies for PyAudio
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check || true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        cat bandit-report.json